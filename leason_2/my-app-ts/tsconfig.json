{
  "compilerOptions": {
    "outDir": "./dist/", //輸出檔案的目標資料夾
    "noImplicitAny":false, //是否檢查變數有宣告any類型 (可以JS跟TS混合寫)
    "target": "es5", //編譯後的目標JavaScript版本，因為這樣才能被主流的瀏覽器解讀，其他可以設定的參數：es5, es6/es2015, 
                     //es2016, es2017, es2018, es2019, es2020, esnext
    "lib": [ // 引用的函式庫
      "dom", //可以讀取Dom物件，範例：document.getElementById("root")
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true, //允許混合編譯JavaScript文件
    "skipLibCheck": true,
    "esModuleInterop": true, //允許我們使用commonjs的方式import默認文件, import React from 'react'
    //"esModuleInterop": false, //import * as React from 'react'
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext", //目前開發用的代碼模組，常用的有Node.js的CommonJS、ES6的esnext、requirejs的AMD
    "moduleResolution": "node", //編譯器的工作方式，classic於2019年12月已廢除，必須要開啟
    "resolveJsonModule": true, //讀取Json的參數，必須要開啟
    "isolatedModules": true, //編譯器會將每個文件當作單獨的模組使用
    "noEmit": true, //當編譯錯誤的時候，編譯器不會生成JavaScript代碼
    "jsx": "react-jsx" //允許編譯器支援編譯React代碼
  },
  "include": [
    "src" //** 代表任意子目錄， * 代表任意文件名
          //? 代表前一個字可以被忽略，範例：src/*.tsx?，則同時代表src/*.tsx跟src/*.ts
  ],
  "files":{
    //"./file1.ts" //不管有沒有exclude，都會編譯此設定中的檔案
  },
  "exclude": [
    "node_modules", //參數設定與include一樣，用來排除不要編譯項目，files設定不會被此設定影響，如果省略exclude就會預設outDir為排除項目
    "**/*/*.test.ts"
  ]
  //如果同時沒有指定files跟include，則編譯器將除了exclude以外的所有ts文件
}
